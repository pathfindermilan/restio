from fastapi import FastAPI, HTTPException, UploadFile, Form, File
from pydantic import BaseModel
from typing import Optional
from aria import analyze_image_with_text, analyze_text
from utils import image_to_base64
import fitz

app = FastAPI()

class TextAnalysisRequest(BaseModel):
    text: str

@app.post("/describe-image")
async def describe_image_endpoint(image: UploadFile = File(...)):
    """
    Endpoint to describe an image using the Aria API.
    """
    try:
        image_data = await image.read()
        base64_image = image_to_base64(image_data)
        system_prompt = "Analyze the provided image and return a description of its content."
        result = analyze_image_with_text(base64_image, system_prompt)
        return {"image_summary": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# @app.post("/analyze-text")
# async def analyze_text_endpoint(request: TextAnalysisRequest):
#     """
#     Endpoint to analyze text using the Aria API.
#     """
#     try:
#         result = analyze_text(request.text)
#         return {"analysis_result": result}
#     except Exception as e:
#         raise HTTPException(status_code=500, detail=str(e))

@app.post("/describe-document")
async def analyze_pdf_summary(document: UploadFile = File(...)):
    """
    Endpoint to extract text from a PDF and generate a summary using the Aria API.
    """
    try:
        pdf_data = await document.read()

        pdf_text = ""
        with fitz.open(stream=pdf_data, filetype="pdf") as pdf_document:
            for page_num in range(pdf_document.page_count):
                page = pdf_document[page_num]
                pdf_text += page.get_text("text")

        summary_prompt = (
            "Here is a PDF document. Please provide a clear and concise summary "
            "of the main information in the content."
        )

        result = analyze_text(f"{summary_prompt}\n\n{pdf_text}")
        return {"document_summary": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/generate-answer")
async def analyze_user_data(
    name: str,
    age: int,
    image_summary: str,
    document_summary: str,
    user_transcript: str,
    content_type: str,
    feeling_level: str,
):
    """
    Analyzes user data to generate a motivational AI response based on the user's inputs.

    This endpoint is designed to leverage various aspects of a user's personal information and context to generate an AI-assisted motivational response. The AI functions as a virtual voice assistant, aiming to personalize interactions and provide uplifting feedback.

    Parameters:
    - name (str): The user's name, which the AI uses to personalize responses.
    - age (int): The age of the user, potentially influencing the tone and content of the feedback.
    - image_summary (str): A brief summary of an image provided by the user, which might represent their current emotions or inspirations. This image could range from emoticons depicting their feelings to photos that inspire them.
    - document_summary (str): A summary of any uploaded PDF documents, which may include important details like medication the user is on or factors affecting their well-being.
    - user_transcript (str): The user’s spoken or written input, capturing what they wish to express—ranging from joy to seeking motivational insights.
    - content_type (str): Specifies the format of the generated content, such as a joke, a motivational speech, an exercise recommendation, or a video link.
    - feeling_level (str): Describes the user's current emotional state, which can be sad, happy, angry, confident, tired, or confused, to allow tailored responses that aim to uplift the user.

    Returns:
    - A JSON response containing an "ai_summary" key, which holds a motivational message generated by the AI to help improve the user's mood and overall mental state. In case of an error, an appropriate HTTP exception is raised.

    The primary objective of this AI system is to serve as a motivator, enhancing the emotional well-being of users through personalized and contextually relevant responses.
    """
    try:
        return {"ai_summary": "This should be the response of the ai"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
